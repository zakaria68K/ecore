/*
 * generated by Xtext 2.32.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mymetamodel.DependancesProjet;
import mymetamodel.Etapespersl;
import mymetamodel.MymetamodelPackage;
import mymetamodel.Projet;
import mymetamodel.Testing;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.services.InitConfigGrammarAccess;

@SuppressWarnings("all")
public class InitConfigSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private InitConfigGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MymetamodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MymetamodelPackage.DEPENDANCES_PROJET:
				sequence_DependancesProjet(context, (DependancesProjet) semanticObject); 
				return; 
			case MymetamodelPackage.ETAPESPERSL:
				sequence_Etapespersl(context, (Etapespersl) semanticObject); 
				return; 
			case MymetamodelPackage.PROJET:
				sequence_Projet(context, (Projet) semanticObject); 
				return; 
			case MymetamodelPackage.TESTING:
				sequence_Testing(context, (Testing) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     DependancesProjet returns DependancesProjet
	 *
	 * Constraint:
	 *     (nom=EString? version=EString? configuration=EString?)
	 * </pre>
	 */
	protected void sequence_DependancesProjet(ISerializationContext context, DependancesProjet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Etapespersl returns Etapespersl
	 *
	 * Constraint:
	 *     (name=EString cmd=EString? description=EString?)
	 * </pre>
	 */
	protected void sequence_Etapespersl(ISerializationContext context, Etapespersl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Projet returns Projet
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         url=EString? 
	 *         branch=EString? 
	 *         dependancesprojet+=DependancesProjet 
	 *         dependancesprojet+=DependancesProjet* 
	 *         configuration=Testing 
	 *         (etapespersl+=Etapespersl etapespersl+=Etapespersl*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Projet(ISerializationContext context, Projet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Testing returns Testing
	 *
	 * Constraint:
	 *     (name=EString target=EString? cmdtest=EString?)
	 * </pre>
	 */
	protected void sequence_Testing(ISerializationContext context, Testing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
