/**
 * generated by Xtext 2.32.0
 */
package org.xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import mymetamodel.DependancesProjet;
import mymetamodel.Etapespersl;
import mymetamodel.Projet;
import mymetamodel.Testing;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.services.InitConfigGrammarAccess;

@SuppressWarnings("all")
public class InitConfigFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private InitConfigGrammarAccess _initConfigGrammarAccess;

  protected void _format(final Projet projet, @Extension final IFormattableDocument document) {
    EList<DependancesProjet> _dependancesprojet = projet.getDependancesprojet();
    for (final DependancesProjet dependancesProjet : _dependancesprojet) {
      document.<DependancesProjet>format(dependancesProjet);
    }
    document.<Testing>format(projet.getConfiguration());
    EList<Etapespersl> _etapespersl = projet.getEtapespersl();
    for (final Etapespersl etapespersl : _etapespersl) {
      document.<Etapespersl>format(etapespersl);
    }
  }

  public void format(final Object projet, final IFormattableDocument document) {
    if (projet instanceof XtextResource) {
      _format((XtextResource)projet, document);
      return;
    } else if (projet instanceof Projet) {
      _format((Projet)projet, document);
      return;
    } else if (projet instanceof EObject) {
      _format((EObject)projet, document);
      return;
    } else if (projet == null) {
      _format((Void)null, document);
      return;
    } else if (projet != null) {
      _format(projet, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(projet, document).toString());
    }
  }
}
