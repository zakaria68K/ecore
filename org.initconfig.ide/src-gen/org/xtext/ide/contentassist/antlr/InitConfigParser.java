/*
 * generated by Xtext 2.32.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalInitConfigParser;
import org.xtext.services.InitConfigGrammarAccess;

public class InitConfigParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(InitConfigGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, InitConfigGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getProjetAccess().getGroup(), "rule__Projet__Group__0");
			builder.put(grammarAccess.getProjetAccess().getGroup_3(), "rule__Projet__Group_3__0");
			builder.put(grammarAccess.getProjetAccess().getGroup_4(), "rule__Projet__Group_4__0");
			builder.put(grammarAccess.getProjetAccess().getGroup_8(), "rule__Projet__Group_8__0");
			builder.put(grammarAccess.getProjetAccess().getGroup_12(), "rule__Projet__Group_12__0");
			builder.put(grammarAccess.getProjetAccess().getGroup_12_3(), "rule__Projet__Group_12_3__0");
			builder.put(grammarAccess.getDependancesProjetAccess().getGroup(), "rule__DependancesProjet__Group__0");
			builder.put(grammarAccess.getDependancesProjetAccess().getGroup_3(), "rule__DependancesProjet__Group_3__0");
			builder.put(grammarAccess.getDependancesProjetAccess().getGroup_4(), "rule__DependancesProjet__Group_4__0");
			builder.put(grammarAccess.getDependancesProjetAccess().getGroup_5(), "rule__DependancesProjet__Group_5__0");
			builder.put(grammarAccess.getTestingAccess().getGroup(), "rule__Testing__Group__0");
			builder.put(grammarAccess.getTestingAccess().getGroup_4(), "rule__Testing__Group_4__0");
			builder.put(grammarAccess.getTestingAccess().getGroup_5(), "rule__Testing__Group_5__0");
			builder.put(grammarAccess.getEtapesperslAccess().getGroup(), "rule__Etapespersl__Group__0");
			builder.put(grammarAccess.getEtapesperslAccess().getGroup_4(), "rule__Etapespersl__Group_4__0");
			builder.put(grammarAccess.getEtapesperslAccess().getGroup_5(), "rule__Etapespersl__Group_5__0");
			builder.put(grammarAccess.getProjetAccess().getNameAssignment_1(), "rule__Projet__NameAssignment_1");
			builder.put(grammarAccess.getProjetAccess().getUrlAssignment_3_1(), "rule__Projet__UrlAssignment_3_1");
			builder.put(grammarAccess.getProjetAccess().getBranchAssignment_4_1(), "rule__Projet__BranchAssignment_4_1");
			builder.put(grammarAccess.getProjetAccess().getDependancesprojetAssignment_7(), "rule__Projet__DependancesprojetAssignment_7");
			builder.put(grammarAccess.getProjetAccess().getDependancesprojetAssignment_8_1(), "rule__Projet__DependancesprojetAssignment_8_1");
			builder.put(grammarAccess.getProjetAccess().getConfigurationAssignment_11(), "rule__Projet__ConfigurationAssignment_11");
			builder.put(grammarAccess.getProjetAccess().getEtapesperslAssignment_12_2(), "rule__Projet__EtapesperslAssignment_12_2");
			builder.put(grammarAccess.getProjetAccess().getEtapesperslAssignment_12_3_1(), "rule__Projet__EtapesperslAssignment_12_3_1");
			builder.put(grammarAccess.getDependancesProjetAccess().getNomAssignment_3_1(), "rule__DependancesProjet__NomAssignment_3_1");
			builder.put(grammarAccess.getDependancesProjetAccess().getVersionAssignment_4_1(), "rule__DependancesProjet__VersionAssignment_4_1");
			builder.put(grammarAccess.getDependancesProjetAccess().getConfigurationAssignment_5_1(), "rule__DependancesProjet__ConfigurationAssignment_5_1");
			builder.put(grammarAccess.getTestingAccess().getNameAssignment_2(), "rule__Testing__NameAssignment_2");
			builder.put(grammarAccess.getTestingAccess().getTargetAssignment_4_1(), "rule__Testing__TargetAssignment_4_1");
			builder.put(grammarAccess.getTestingAccess().getCmdtestAssignment_5_1(), "rule__Testing__CmdtestAssignment_5_1");
			builder.put(grammarAccess.getEtapesperslAccess().getNameAssignment_2(), "rule__Etapespersl__NameAssignment_2");
			builder.put(grammarAccess.getEtapesperslAccess().getCmdAssignment_4_1(), "rule__Etapespersl__CmdAssignment_4_1");
			builder.put(grammarAccess.getEtapesperslAccess().getDescriptionAssignment_5_1(), "rule__Etapespersl__DescriptionAssignment_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private InitConfigGrammarAccess grammarAccess;

	@Override
	protected InternalInitConfigParser createParser() {
		InternalInitConfigParser result = new InternalInitConfigParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public InitConfigGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(InitConfigGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
