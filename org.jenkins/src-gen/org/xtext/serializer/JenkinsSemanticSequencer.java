/*
 * generated by Xtext 2.32.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.services.JenkinsGrammarAccess;
import projectsortie.Agent;
import projectsortie.Build;
import projectsortie.Cloning;
import projectsortie.Deploy;
import projectsortie.ProjectsortiePackage;
import projectsortie.Stages;
import projectsortie.Tests;
import projectsortie.config;
import projectsortie.credentials;

@SuppressWarnings("all")
public class JenkinsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JenkinsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProjectsortiePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProjectsortiePackage.AGENT:
				sequence_Agent(context, (Agent) semanticObject); 
				return; 
			case ProjectsortiePackage.BUILD:
				sequence_Build(context, (Build) semanticObject); 
				return; 
			case ProjectsortiePackage.CLONING:
				sequence_Cloning(context, (Cloning) semanticObject); 
				return; 
			case ProjectsortiePackage.DEPLOY:
				sequence_Deploy(context, (Deploy) semanticObject); 
				return; 
			case ProjectsortiePackage.STAGES:
				sequence_Stages(context, (Stages) semanticObject); 
				return; 
			case ProjectsortiePackage.TESTS:
				sequence_Tests(context, (Tests) semanticObject); 
				return; 
			case ProjectsortiePackage.CONFIG:
				sequence_config(context, (config) semanticObject); 
				return; 
			case ProjectsortiePackage.CREDENTIALS:
				sequence_credentials(context, (credentials) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Agent returns Agent
	 *
	 * Constraint:
	 *     type=EString?
	 * </pre>
	 */
	protected void sequence_Agent(ISerializationContext context, Agent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Build returns Build
	 *
	 * Constraint:
	 *     (cmd=EString? agent=Agent? (credentials+=credentials credentials+=credentials*)?)
	 * </pre>
	 */
	protected void sequence_Build(ISerializationContext context, Build semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cloning returns Cloning
	 *
	 * Constraint:
	 *     (url=EString? credentialID=EString? branch=EString? agent=Agent?)
	 * </pre>
	 */
	protected void sequence_Cloning(ISerializationContext context, Cloning semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Deploy returns Deploy
	 *
	 * Constraint:
	 *     (cmd=EString? (credentials+=credentials credentials+=credentials*)?)
	 * </pre>
	 */
	protected void sequence_Deploy(ISerializationContext context, Deploy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Stages returns Stages
	 *
	 * Constraint:
	 *     (name=EString tests=Tests cloning=Cloning build=Build deploy=Deploy)
	 * </pre>
	 */
	protected void sequence_Stages(ISerializationContext context, Stages semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectsortiePackage.Literals.STAGES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectsortiePackage.Literals.STAGES__NAME));
			if (transientValues.isValueTransient(semanticObject, ProjectsortiePackage.Literals.STAGES__TESTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectsortiePackage.Literals.STAGES__TESTS));
			if (transientValues.isValueTransient(semanticObject, ProjectsortiePackage.Literals.STAGES__CLONING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectsortiePackage.Literals.STAGES__CLONING));
			if (transientValues.isValueTransient(semanticObject, ProjectsortiePackage.Literals.STAGES__BUILD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectsortiePackage.Literals.STAGES__BUILD));
			if (transientValues.isValueTransient(semanticObject, ProjectsortiePackage.Literals.STAGES__DEPLOY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectsortiePackage.Literals.STAGES__DEPLOY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStagesAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStagesAccess().getTestsTestsParserRuleCall_4_0(), semanticObject.getTests());
		feeder.accept(grammarAccess.getStagesAccess().getCloningCloningParserRuleCall_6_0(), semanticObject.getCloning());
		feeder.accept(grammarAccess.getStagesAccess().getBuildBuildParserRuleCall_8_0(), semanticObject.getBuild());
		feeder.accept(grammarAccess.getStagesAccess().getDeployDeployParserRuleCall_10_0(), semanticObject.getDeploy());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Tests returns Tests
	 *
	 * Constraint:
	 *     (shell=EString? classestotest=EString? agent=Agent? (credentials+=credentials credentials+=credentials*)?)
	 * </pre>
	 */
	protected void sequence_Tests(ISerializationContext context, Tests semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     config returns config
	 *
	 * Constraint:
	 *     (name=EString agent=Agent stages+=Stages stages+=Stages*)
	 * </pre>
	 */
	protected void sequence_config(ISerializationContext context, config semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     credentials returns credentials
	 *
	 * Constraint:
	 *     (name=EString variable=EString?)
	 * </pre>
	 */
	protected void sequence_credentials(ISerializationContext context, credentials semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
